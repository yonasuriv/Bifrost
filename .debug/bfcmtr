#!/bin/sh

# Styles
end="\033[0m"
reset="\033[0m"
dim="\033[2m"
cursive="\033[2m"
hidden="\033[8m"
bold="\033[1m"
underline="\033[4m"
blink="\033[5m"
negative="\033[7m"
striket="\033[9m"
grey="\033[0;30m"
white="\033[0;37m"
white2="\033[1;37m"
red="\033[0;31m"
red2="\033[1;31m"
green="\033[0;32m"
green2="\033[1;32m"
yellow="\033[0;33m"
yellow2="\033[1;33m"
blue="\033[0;34m"
blue2="\033[1;34m"
purple="\033[0;35m"
purple2="\033[1;35m"
cyan="\033[0;36m"
cyan2="\033[1;36m"
redbg="\033[1;37;41m"
greenbg="\033[1;37;42m"
yellowbg="\033[1;37;43m"
bluebg="\033[1;37;44m"
purplebg="\033[1;37;45m"
cyanbg="\033[1;37;46m"
whitebg="\033[1;37;47m"
greybgred="\033[1;31;40m"
greybggreen="\033[1;32;40m"
greybgyellow="\033[1;33;40m"
greybgblue="\033[1;34;40m"
greybgpurple="\033[1;35;40m"
greybgcyan="\033[1;36;40m"
greybgwhite="\033[1;37;40m"

software="BIFROST LINK"

commit () {
    # User-Defined path for the GitHub Repository
    repository_path=~/.xfiles/projects/bifrost

    cd "$repository_path"

    # User-Defined path to the control file
    control_file_path=~/.xfiles/projects/bifrost/.core/CONTROL

    # Check if the control file exists at the specified path
    if [ ! -f "$control_file_path" ]; then
        echo
        printf "$red2 Control file not found at: $control_file_path$end"
        exit 1
    fi

    # Read the version from the control file
    version=$(grep 'version=' "$control_file_path" | awk -F '"' '{print $2}')

    echo
    printf "$negative [$software VERSION $version] $end" && echo
    echo ""

    # Ask for user input for REASON and level
    printf "$dim [UPDATE LEVEL GRADE (3-1)]:$end $yellow" && read level
    echo
    printf "$end $dim[COMMIT CHANGES / MESSAGE]:$end $yellow2" && read reason
    printf "$end"
    
    # Split the version into its three components
    IFS='.' read -ra version_parts <<< "$version"
    third_level="${version_parts[0]}"
    second_level="${version_parts[1]}"
    first_level="${version_parts[2]}"

    # Update the version based on the specified level (swapped assignments)
    case $level in
        1)
            # Increment the first level by 1
            first_level=$((first_level + 1))
            ;;
        2)
            # Increment the second level by 1 and reset the first level to 0
            second_level=$((second_level + 1))
            first_level=0
            ;;
        3)
            # Increment the third level by 1 and reset the second and first levels to 0
            third_level=$((third_level + 1))
            second_level=0
            first_level=0
            ;;
        *)
            echo "Invalid level specified. Level must be 1, 2, or 3."
            exit 1
            ;;
    esac

    # Check for overflow and increment rows on the left
    if [ "$first_level" -ge 100 ]; then
        second_level=$((second_level + 1))
        first_level=0
    fi
    if [ "$second_level" -ge 100 ]; then
        third_level=$((third_level + 1))
        second_level=0
    fi

    # Construct the new version as a string
    new_version="${third_level}.${second_level}.${first_level}"

    # Update the version in the control file
    sed -i "s/version=\"$version\"/version=\"$new_version\"/" "$control_file_path"

    # Commit changes to Git
    echo
    git add . | sed 's/^/ /'
    echo
    git commit -m "$reason" | sed 's/^/ /' 
    echo
    git push | sed 's/^/  /' #> /dev/null 2>&1
}

commit

# Remove the following line of code if not using Bifrost Link
bifrost -fu
